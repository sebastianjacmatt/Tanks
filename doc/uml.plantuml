@startuml tanks
interface Collidable {
    + move()
}

abstract class AbstractPlayer implements Collidable {
    - collidables : ArrayList
    - elapsedtime : float
    - currentActiveAnimation : Animation
    - upAnim : Animation
    - rightAnim : Animation
    - leftAnim : Animation
    - downAnim : Animation

    + draw()
    - update()
    - collision()
    # move()
    - createAnimation() 
}

class CollisionDetector {
    - map : Map

    + detectCollisions(collidable: Collidable)
}

class Player1 implements Collidable {
    + move()
}

class Player2 implements Collidable {
    + move()
}

class Map {
    - tiledMap : TiledMap
    - layer : TiledMapTileLayer
    - tileWidht : int
    - tileHeight : int
    - mapWidth : int
    - mapHeight : int
    - bounds : Rectanle

    + getCollidableRectangles() : ArrayList
}

class Tanks {
    - batch : SpriteBatch
    - img : Sprite
    - players : ArrayList<Player>

    - tiledMapRenderer : TileMapRenderer
    - camera : OrthographicCamera
    - map : Map
    - collisionDetector : CollisionDetector

    + addPlayer(player: Collidable)
    + detectCollisions()
}

Tanks --> Map
Tanks --> CollisionDetector : checks if object collides
Tanks --> Player1
Tanks --> Player2

CollisionDetector --> Map : uses map
CollisionDetector --> Collidable : uses interface

Player1 --|> AbstractPlayer
Player2 --|> AbstractPlayer
@enduml
