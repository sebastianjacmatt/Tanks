@startuml tanks
interface Collidable {
    + move()
    + getRectangle()
}
interface Controllable {
  enum DIRECTIONS up,down,left,right,udle
  + registerInput()

}

abstract class AbstractPlayer implements Collidable {
    - collidables : ArrayList
    - elapsedtime : float
    - currentActiveAnimation : Animation
    - upAnim : Animation
    - rightAnim : Animation
    - leftAnim : Animation
    - downAnim : Animation

    + draw()
    - update()
    - collision()
    # move()
    - createAnimation() 
}

class CollisionDetector {
    - map : Map

    + detectCollisions(collidable: Collidable)
}

class Player implements Collidable {
    + move()
}
class Player1Controller implements Controllable{
    + registerInput()
}
class Player2Controller implements Controllable{
    + registerInput()
}

class Map {
    - tiledMap : TiledMap
    - layer : TiledMapTileLayer
    - tileWidht : int
    - tileHeight : int
    - mapWidth : int
    - mapHeight : int
    - bounds : Rectanle

    + getCollidableRectangles() : ArrayList
}

class Tanks {
    - batch : SpriteBatch
    - img : Sprite
    - players : ArrayList<Player>

    - tiledMapRenderer : TileMapRenderer
    - camera : OrthographicCamera
    - map : Map
    - collisionDetector : CollisionDetector

    + create()
    + render()

    + update()
    + detectCollisions()
    + checkPlayerCollision()
    + detectCollisions()

    + dispose()

}

Tanks --> Map
Tanks --> CollisionDetector
Tanks --> Player

CollisionDetector --> Map
CollisionDetector --> Collidable

Player --|> AbstractPlayer
Player --> Controllable : assigns a controller on creation
@enduml
